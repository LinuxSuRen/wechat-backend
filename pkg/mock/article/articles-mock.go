// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/article/articles.go

// Package mock_article is a generated GoMock package.
package mock_article

import (
	gomock "github.com/golang/mock/gomock"
	config "github.com/linuxsuren/wechat-backend/pkg/config"
	reflect "reflect"
)

// MockResponseManager is a mock of ResponseManager interface
type MockResponseManager struct {
	ctrl     *gomock.Controller
	recorder *MockResponseManagerMockRecorder
}

// MockResponseManagerMockRecorder is the mock recorder for MockResponseManager
type MockResponseManagerMockRecorder struct {
	mock *MockResponseManager
}

// NewMockResponseManager creates a new mock instance
func NewMockResponseManager(ctrl *gomock.Controller) *MockResponseManager {
	mock := &MockResponseManager{ctrl: ctrl}
	mock.recorder = &MockResponseManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseManager) EXPECT() *MockResponseManagerMockRecorder {
	return m.recorder
}

// GetResponse mocks base method
func (m *MockResponseManager) GetResponse(arg0 string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponse", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetResponse indicates an expected call of GetResponse
func (mr *MockResponseManagerMockRecorder) GetResponse(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponse", reflect.TypeOf((*MockResponseManager)(nil).GetResponse), arg0)
}

// InitCheck mocks base method
func (m *MockResponseManager) InitCheck(weConfig *config.WeChatConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitCheck", weConfig)
}

// InitCheck indicates an expected call of InitCheck
func (mr *MockResponseManagerMockRecorder) InitCheck(weConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitCheck", reflect.TypeOf((*MockResponseManager)(nil).InitCheck), weConfig)
}
